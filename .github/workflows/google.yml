# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "master" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  TF_STATE_BUCKET_NAME: ${{ secrets.GCP_TF_STATE_BUCKET }}


jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/472643004208/locations/global/workloadIdentityPools/k8s-pool/providers/k8s-provider'
        service_account: 's015252863635-scraper@$GCP_PROJECT_ID.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Docker configuration
      run: |-
        gcloud auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'


    # Build the Docker image
    - name: Build
      run: |
         docker build -t us.gcr.io/$GCP_PROJECT_ID/scraperappimage:$IMAGE_TAG .
         docker push us.gcr.io/$GCP_PROJECT_ID/scraperappimage:$IMAGE_TAG
      working-directory: ./scraperapp

    - name: Setup Terraform
         uses: hashicorp/setup-terraform@v2

    - name: Terraform init
       run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="prefix=test"
       working-directory: ./terraform

    - name: Terraform Plan
        run: |
          terraform plan \
          -var="region=us-central1" \
          -var="project_id=$GCP_PROJECT_ID" \
          -var="container_image=us.gcr.io/$GCP_PROJECT_ID/scraperappimage:$IMAGE_TAG" \
          -out=PLAN
        working-directory: ./terraform

    - name: Terraform Apply
        run: terraform apply PLAN
        working-directory: ./terraform